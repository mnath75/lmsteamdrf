# Generated by Django 3.2.11 on 2022-06-07 12:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('QuizData', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='testsection',
            name='ts_id',
            field=models.AutoField(db_column='ts_id', primary_key=True, serialize=False),
        ),
        migrations.CreateModel(
            name='TestSetting',
            fields=[
                ('ti_id', models.AutoField(db_column='tq_id', default=None, primary_key=True, serialize=False)),
                ('shuffleOption', models.BooleanField()),
                ('shuffleQuestion', models.BooleanField()),
                ('skipShuffleOptionn', models.BooleanField()),
                ('enableMovePrevious', models.BooleanField()),
                ('groupByQtype', models.BooleanField()),
                ('groupByTopic', models.BooleanField()),
                ('groupByQtag', models.BooleanField()),
                ('enableCalclator', models.BooleanField()),
                ('calculatorOptions', models.CharField(choices=[('Normal', 'Normal'), ('Scientific', 'Scientific')], default='1', max_length=20)),
                ('noOfAttempt', models.PositiveIntegerField(default=1)),
                ('reAttemptoptions', models.CharField(choices=[('ReAttempt_in_Days', 'ReAttempt_in_Days'), ('ReAttempts_in_Hours', 'ReAttempts_in_Hours')], default='1', max_length=20)),
                ('noOfReattempt', models.IntegerField()),
                ('unlimitedAttempt', models.BooleanField()),
                ('showTimeSpent', models.BooleanField()),
                ('nextQuestionJumpTimer', models.BooleanField()),
                ('lingualOption', models.CharField(choices=[('UniLangual', 'UniLangual'), ('Bilingual', 'Bilingual')], default='1', max_length=20)),
                ('enableDragDrop', models.BooleanField()),
                ('generateRank', models.BooleanField()),
                ('rankBatchLevel', models.BooleanField()),
                ('rankCourseLevel', models.BooleanField()),
                ('enablePassing', models.CharField(choices=[('For_Test', 'For_Test'), ('For_Section', 'For_Section')], default='1', max_length=20)),
                ('setGradeOptions', models.CharField(choices=[('Passing_Marks', 'Set_Passing_Marks'), ('Passing_Percentage', 'Set_Passing_Percentage')], default='1', max_length=20)),
                ('setPassingMark', models.PositiveIntegerField()),
                ('percentage', models.BooleanField()),
                ('percentile', models.BooleanField()),
                ('tScore', models.BooleanField()),
                ('partialMarking', models.BooleanField()),
                ('enableGreading', models.BooleanField()),
                ('gradeAmax', models.IntegerField()),
                ('gradeAmin', models.IntegerField()),
                ('gradeBmax', models.IntegerField()),
                ('gradeBmin', models.IntegerField()),
                ('gradeCmax', models.IntegerField()),
                ('gradeCmin', models.IntegerField()),
                ('gradeDmax', models.IntegerField()),
                ('gradeDmin', models.IntegerField()),
                ('gradeEmax', models.IntegerField()),
                ('gradeEmin', models.IntegerField()),
                ('gradeFmax', models.IntegerField()),
                ('gradeFmin', models.IntegerField()),
                ('enableSolution', models.BooleanField()),
                ('afterEachQuestion', models.BooleanField()),
                ('afterEndDate', models.BooleanField()),
                ('afterTestComplete', models.BooleanField()),
                ('onSpecificDate', models.DateTimeField()),
                ('solutionOptionns', models.CharField(choices=[('Show_Solution_only_once', 'Show_Solution_only_once'), ('Show_Solution_always', 'Show_Solution_always')], default='1', max_length=50)),
                ('revealAnswerOptions', models.CharField(choices=[('All_Questions', 'All_Questions'), ('Wrong_Questions', 'Wrong_Questions')], default='1', max_length=50)),
                ('randomTestGenerator', models.BooleanField()),
                ('enableProcotring', models.BooleanField()),
                ('liveProctoring', models.BooleanField()),
                ('userInvigilator', models.TextField(default=None, max_length=200, null=True)),
                ('videoRecordingProctoring', models.BooleanField()),
                ('geoTagging', models.BooleanField()),
                ('randomSelfiesNo', models.IntegerField()),
                ('ipTagging', models.BooleanField()),
                ('noiseDetection', models.BooleanField()),
                ('saveLogs', models.BooleanField()),
                ('multipleDisplays', models.BooleanField()),
                ('faceRecognize', models.BooleanField()),
                ('remoteAccessDisable', models.BooleanField()),
                ('idCardScanning', models.BooleanField()),
                ('enableKeyboardinTest', models.BooleanField()),
                ('enableMouseScroll', models.BooleanField()),
                ('enableMouseRight', models.BooleanField()),
                ('enableWatermark', models.BooleanField()),
                ('watermarkLogo', models.BooleanField()),
                ('uploadWatermark', models.ImageField(upload_to='')),
                ('textWatermark', models.TextField(max_length=200)),
                ('watermarkOption', models.CharField(choices=[('on_only_image', 'on_only_image'), ('all', 'all')], default='1', max_length=50)),
                ('watermarkLayoutOption', models.CharField(choices=[('Diagonal', 'Diagonal'), ('horizontal', 'horizontal')], default='1', max_length=50)),
                ('enableStudentFeedback', models.BooleanField()),
                ('SelectSectionForOptions', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testmake_testSection', to='QuizData.testsection')),
                ('testID', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testmake_testSetting', to='QuizData.testmake')),
                ('user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.DO_NOTHING, related_name='TestSetting_user1', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tq_id', models.AutoField(db_column='tq_id', default=None, primary_key=True, serialize=False)),
                ('rightMarks', models.FloatField()),
                ('wrongMarks', models.FloatField()),
                ('partialMarks', models.FloatField()),
                ('questionID', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Quest_testQ', to='QuizData.ques')),
                ('sectionID', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testSection_testQ', to='QuizData.testsection')),
                ('testID', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testm_testQ', to='QuizData.testmake')),
                ('user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.DO_NOTHING, related_name='testQ_user1', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestInstruction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ti_id', models.AutoField(db_column='tq_id', default=None, primary_key=True, serialize=False)),
                ('instructionName', models.TextField(blank=True, default=None, null=True)),
                ('discription', models.TimeField(blank=True, default=True, null=True)),
                ('testID', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testmake_testIns', to='QuizData.testmake')),
                ('user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.DO_NOTHING, related_name='testInstruction_user1', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
    ]
